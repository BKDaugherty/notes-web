[{"/Users/brendond/Dev/notes-web/src/index.js":"1","/Users/brendond/Dev/notes-web/src/serviceWorkerRegistration.js":"2","/Users/brendond/Dev/notes-web/src/App.js":"3","/Users/brendond/Dev/notes-web/src/reportWebVitals.js":"4"},{"size":816,"mtime":1607277858173,"results":"5","hashOfConfig":"6"},{"size":5064,"mtime":1607277789011,"results":"7","hashOfConfig":"6"},{"size":9748,"mtime":1608754230688,"results":"8","hashOfConfig":"6"},{"size":364,"mtime":1607277789010,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"vr134z",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"/Users/brendond/Dev/notes-web/src/index.js",[],["20","21"],"/Users/brendond/Dev/notes-web/src/serviceWorkerRegistration.js",[],"/Users/brendond/Dev/notes-web/src/App.js",["22","23"],"import React from 'react';\nimport { createMuiTheme, ThemeProvider, withStyles } from \"@material-ui/core/styles\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Fab from \"@material-ui/core/Fab\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListIcon from '@material-ui/icons/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport NotesIcon from '@material-ui/icons/Notes';\nimport AddIcon from '@material-ui/icons/Add';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\n\n// Run against prod API\nconst NOTES_API = \"https://typed-thoughts.herokuapp.com/\"\n// Local Development\n// const NOTES_API = 'http://localhost:9001/'\nconst lists = [];\n\nconst styles = theme => ({\n  fullHeight: {\n    ...theme.mixins.toolbar,\n  },\n    text: {\n    padding: theme.spacing(2, 2, 0),\n    },\n  addButton: {\n    position: 'absolute',\n    zIndex: 1,\n    bottom: '10%',\n    right: \"5%\",\n    margin: '0 auto',\n  },\n  paper: {\n    paddingBottom: 50,\n  },\n  list: {\n    marginBottom: theme.spacing(2),\n  },\n  subheader: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  appBar: {\n    top: 'auto',\n    bottom: 0,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nclass App extends React.Component {\n    render () {\n\tconst theme = createMuiTheme({\n\t     palette: {\n\t\t primary: {\n\t\t     light: '#757ce8',\n\t\t     main: '#000000',\n\t\t     dark: '#002884',\n\t\t     contrastText: '#fff',\n\t\t },\n\t\t secondary: {\n\t\t     light: '#ff7961',\n\t\t     main: '#f44336',\n\t\t     dark: '#ba000d',\n\t\t     contrastText: '#000',\n\t\t },\n\t\t background: {\n\t\t     paper: '#efefef',\n\t\t     default: \"#fff\",\n\t\t }\n\t     },\n\t});\n\treturn (<React.Fragment>\n\t    <CssBaseline />\n\t    <ThemeProvider theme={theme}>\n\t    <StyledNotesPanel />\n\t    <StyledBottomAppBar />\n\t    </ThemeProvider>\n\t</React.Fragment>);\n    }\n}\n\n\nclass NotesPanel extends React.Component {\n    // Note we are looking at, and whether we are looking at it\n    constructor(props) {\n\tsuper(props);\n\t// Chose to unpack note to simplify set_state\n\tthis.state = {\n\t    open: false,\n\t    active_uuid: \"\",\n\t    title: \"\",\n\t    description:\"\",\n\t    owner: \"brendon\",\n\t    origin: \"\",\n\t    tags: [],\n\t    notes: []\n\t    \n\t}\n\tthis.handleNoteEdit = this.handleNoteEdit.bind(this);\n\tthis.handleOpen = this.handleOpen.bind(this);\n\tthis.handleSave = this.handleSave.bind(this);\n    }\n\n    componentDidMount() {\n\tthis.loadNotes();\n    }\n\n    loadNotes() {\n\tfetch(NOTES_API + \"notes/brendon\").then(response => {\n\t    response.json().then(data => {\n\t\tlet notes = [];\n\t\tfor (const [key, value] of Object.entries(data.notes)) {\n\t\t    notes.push(value);\n\t\t}\n\t\tnotes.sort((a,b) => {\n\t\t    if (a.last_update_time <  b.last_update_time) {\n\t\t\treturn 1;\n\t\t    }\n\t\t    return -1;\n\t\t});\n\t\tthis.setState({\n\t\t    notes: notes\n\t\t});\n\t    })\n\t}).catch(console.log)\n    }\n\n    handleOpen = (active_note) => {\n\tthis.setState(\n\t    {\n\t\topen: true,\n\t\tactive_uuid: active_note.uuid,\n\t\ttitle: active_note.title,\n\t\tdescription: active_note.description,\n\t\torigin: active_note.origin || \"\",\n\t\ttags: active_note.tags,\n\t});\n    }\n\n    handleCreate = () => {\n\tthis.setState(\n\t    {\n\t\topen: true,\n\t\tactive_uuid: null,\n\t\ttitle: \"\",\n\t\tdescription: \"\",\n\t\torigin: \"\",\n\t\ttags: []\n\t});\n    }\n\n    handleNoteEdit(evt) {\n\tthis.setState({\n\t    [evt.target.name]: evt.target.value\n\t});\n    }\n\n    handleSave() {\n\t// If we are editing a note\n\tif(this.state.active_uuid) {\n\t    let note_update_request = {\n\t\tnote_id: this.state.active_uuid,\n\t\ttitle: this.state.title,\n\t\tdescription: this.state.description,\n\t\torigin: this.state.origin,\n\t\ttags: this.state.tags,\n\t    };\n\t    fetch(NOTES_API + \"note/\" + this.state.active_uuid, {\n\t\tmethod: \"PUT\",\n\t\theaders: {\n\t\t    'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(note_update_request)\n\t    }).then(response => {\n\t\t// Once we've successfully saved, log the response, and reload the notes on the page\n\t\tthis.loadNotes();\n\t    }).catch(console.error);\n\t    \n\t} else {\n\t    let note_create_request = {\n\t\ttitle: this.state.title,\n\t\tdescription: this.state.description,\n\t\towner:this.state.owner,\n\t\torigin: this.state.origin,\n\t\ttags: this.state.tags,\n\t    };\n\t    fetch(NOTES_API + \"notes\", {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t    'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(note_create_request)\n\t    }).then(response => {\n\t\tthis.loadNotes();\n\n\t\t// Force close after create\n\t\tthis.handleClose();\n\t    }).catch(console.error);\n\t}\n    }\n\n    handleClose = () => {\n\tthis.setState({open: false, active_note: null});\n    }\n\n    render() {\n\tconst { classes } = this.props;\n\treturn (\n\t    <Paper square className={classes.paper}>\n\t    {this.state.open &&\n\t     <NoteDialog\n\t\thandleClose={this.handleClose}\n\t\thandleChange={this.handleNoteEdit}\n\t\thandleSave={this.handleSave}\n\t\topen={this.state.open}\n\t\ttitle={this.state.title}\n\t\tdescription={this.state.description}\n\t\torigin={this.state.origin}\n\t\t/>}\n            <List className={classes.list}>\n            {this.state.notes.map((note_data, index) => (\n\t\t<>\n\t\t<NoteEntry key={`note-entry-${index}`} note_data={note_data} onClick={() => {this.handleOpen(note_data)}} />\n\t\t</>)\n\t    )}\n            </List>\n\t    <Fab color=\"secondary\" aria-label=\"add\" className={classes.addButton}>\n\t    <IconButton color=\"inherit\" onClick={this.handleCreate}>\n            <AddIcon />\n\t    </IconButton>\n            </Fab>\n\t    </Paper>\n\t);\n    }\n}\n\nclass ListsPanel extends React.Component {\n    render() {\n\tconst { classes } = this.props;\n\treturn (\n\t    <Paper square className={classes.paper}>\n            <Typography className={classes.text} variant=\"h5\" gutterBottom>\n\t    Lists\n            </Typography>\n            <List className={classes.list}>\n            {lists.map(ListEntry)}\n            </List>\n\t    </Paper>\n\t);\n    }\n}\n\n\nclass BottomAppBar extends React.Component {\n    state = {currentTab: \"notes\"}\n    changeTab = (event, value) => {\n\tthis.setState({ currentTab: value});\n    };\n\n    render () {\n\tconst {classes} = this.props;\n\treturn (\n\t    <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n\t    <Toolbar>\n\t    <Grid container alignItems=\"center\" justify=\"space-between\">\n\t    <Grid item>\n\t    <Tabs\n\t    value={this.state.currentTab}\n\t    onChange={this.changeTab}\n\t    variant=\"fullWidth\"\n\t    aria-label=\"tabs\"\n\t    >\n\t    <Tab classes={{ root: classes.fullHeight }} icon={<NotesIcon />} value=\"notes\" />\n\t    <Tab classes={{ root: classes.fullHeight }} icon={<ListIcon />} value=\"lists\" />\n\t    </Tabs>\n\t    </Grid>\n\t    <Grid item>\n\t    <IconButton color=\"inherit\">\n\t    <SearchIcon />\n\t    </IconButton>\n\t    </Grid>\n            </Grid>\n\t    </Toolbar>\n\t    </AppBar>\n\t);\n\n    }\n\n}\n\nclass NoteDialog extends React.Component {\n    render() {\n\tconst {\n\t    open,\n\t    handleChange,\n\t    handleClose,\n\t    handleSave,\n\t    title,\n\t    origin,\n\t    description,\n\t} = this.props;\n\treturn (<Dialog\n        open={open}\n        onClose={handleClose}\n        scroll=\"paper\"\n        aria-labelledby=\"Note Dialog\"\n        aria-describedby=\"Existing Note\"\n      >\n            <DialogTitle>\n\t    <TextField\n            margin=\"dense\"\n            name=\"title\"\n            label=\"Title\"\n            type=\"text\"\n            fullWidth\n\t    value={title}\n\t    onChange={handleChange}\n            />\n\t    </DialogTitle>\n            <DialogContent dividers={true}>\n\t    <TextField\n            margin=\"dense\"\n            name=\"description\"\n            type=\"text\"\n\t    multiline\n\t    rows={8}\n\t    value={description}\n\t    onChange={handleChange}\n            fullWidth\n            />\n\t    <TextField\n            margin=\"dense\"\n            name=\"origin\"\n            label=\"Origin\"\n            type=\"text\"\n            fullWidth\n\t    value={origin}\n\t    onChange={handleChange}\n            />\n\t    <TagField />\n\n        </DialogContent>\n            <DialogActions>\n          <Button onClick={handleSave} color=\"primary\">\n\t    Save\n          </Button>\n          <Button onClick={handleClose} color=\"primary\">\n\t    Close\n          </Button>\n        </DialogActions>\n\t</Dialog>);\n    }\n}\n\nclass TagField extends React.Component {\n    render() {\n\treturn(<TextField\n            margin=\"dense\"\n            name=\"tags\"\n            label=\"Tags\"\n            type=\"text\"\n            fullWidth\n\t/>)\n\t\n    }\n}\n\n    \n\nclass NoteEntry extends React.Component {\n    render() {\n\tconst {note_data, onClick} = this.props;\n\tconst last_update_human = new Date(Number(note_data.last_update_time) * 1000).toLocaleString();\n\treturn (<ListItem divider button onClick={onClick}>\n\t    <ListItemText primary={note_data.title} secondary={last_update_human} />\n\t    </ListItem>);\n    }\n}\n\nconst ListEntry = (list_data) =>\n    (<React.Fragment key={list_data.id}>\n\t<ListItem button>\n\t<ListItemText primary={list_data.title} secondary={list_data.description}/>\n\t</ListItem>\n\t</React.Fragment>);\n\nconst StyledBottomAppBar = withStyles(styles)(BottomAppBar);\nconst StyledNotesPanel = withStyles(styles)(NotesPanel);\nconst StyledListsPanel = withStyles(styles)(ListsPanel);\n\nexport default withStyles(styles)(App);\n","/Users/brendond/Dev/notes-web/src/reportWebVitals.js",[],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":127,"column":15,"nodeType":"30","messageId":"31","endLine":127,"endColumn":18},{"ruleId":"28","severity":1,"message":"32","line":404,"column":7,"nodeType":"30","messageId":"31","endLine":404,"endColumn":23},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-unused-vars","'key' is assigned a value but never used.","Identifier","unusedVar","'StyledListsPanel' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]