{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["NOTES_API","lists","styles","theme","fullHeight","mixins","toolbar","text","padding","spacing","addButton","position","zIndex","bottom","right","margin","paper","paddingBottom","list","marginBottom","subheader","backgroundColor","palette","background","appBar","top","grow","flexGrow","App","createMuiTheme","primary","light","main","dark","contrastText","secondary","default","Fragment","CssBaseline","ThemeProvider","StyledNotesPanel","StyledBottomAppBar","React","Component","NotesPanel","props","handleOpen","active_note","setState","open","active_uuid","uuid","title","description","origin","tags","handleCreate","handleClose","state","owner","notes","handleNoteEdit","bind","handleSave","this","loadNotes","fetch","then","response","json","data","Object","entries","value","push","sort","a","b","last_update_time","catch","console","log","evt","target","name","note_update_request","note_id","method","headers","body","JSON","stringify","error","note_create_request","classes","Paper","square","className","handleChange","List","map","note_data","index","onClick","Fab","color","aria-label","IconButton","ListsPanel","Typography","variant","gutterBottom","ListEntry","BottomAppBar","currentTab","changeTab","event","AppBar","Toolbar","Grid","container","alignItems","justify","item","Tabs","onChange","Tab","root","icon","NoteDialog","Dialog","onClose","scroll","aria-labelledby","aria-describedby","DialogTitle","TextField","label","type","fullWidth","DialogContent","dividers","multiline","rows","DialogActions","Button","TagField","NoteEntry","last_update_human","Date","Number","toLocaleString","ListItem","divider","button","ListItemText","list_data","id","withStyles","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.92a02e32.chunk.js","sourcesContent":["import React from 'react';\nimport { createMuiTheme, ThemeProvider, withStyles } from \"@material-ui/core/styles\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Fab from \"@material-ui/core/Fab\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListIcon from '@material-ui/icons/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport NotesIcon from '@material-ui/icons/Notes';\nimport AddIcon from '@material-ui/icons/Add';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\n\n// Run against prod API\nconst NOTES_API = \"https://typed-thoughts.herokuapp.com/\"\n// Local Development\n// const NOTES_API = 'http://localhost:9001/'\nconst lists = [];\n\nconst styles = theme => ({\n  fullHeight: {\n    ...theme.mixins.toolbar,\n  },\n    text: {\n    padding: theme.spacing(2, 2, 0),\n    },\n  addButton: {\n    position: 'absolute',\n    zIndex: 1,\n    bottom: '10%',\n    right: \"5%\",\n    margin: '0 auto',\n  },\n  paper: {\n    paddingBottom: 50,\n  },\n  list: {\n    marginBottom: theme.spacing(2),\n  },\n  subheader: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  appBar: {\n    top: 'auto',\n    bottom: 0,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nclass App extends React.Component {\n    render () {\n\tconst theme = createMuiTheme({\n\t     palette: {\n\t\t primary: {\n\t\t     light: '#757ce8',\n\t\t     main: '#000000',\n\t\t     dark: '#002884',\n\t\t     contrastText: '#fff',\n\t\t },\n\t\t secondary: {\n\t\t     light: '#ff7961',\n\t\t     main: '#f44336',\n\t\t     dark: '#ba000d',\n\t\t     contrastText: '#000',\n\t\t },\n\t\t background: {\n\t\t     paper: '#efefef',\n\t\t     default: \"#fff\",\n\t\t }\n\t     },\n\t});\n\treturn (<React.Fragment>\n\t    <CssBaseline />\n\t    <ThemeProvider theme={theme}>\n\t    <StyledNotesPanel />\n\t    <StyledBottomAppBar />\n\t    </ThemeProvider>\n\t</React.Fragment>);\n    }\n}\n\n\nclass NotesPanel extends React.Component {\n    // Note we are looking at, and whether we are looking at it\n    constructor(props) {\n\tsuper(props);\n\t// Chose to unpack note to simplify set_state\n\tthis.state = {\n\t    open: false,\n\t    active_uuid: \"\",\n\t    title: \"\",\n\t    description:\"\",\n\t    owner: \"brendon\",\n\t    origin: \"\",\n\t    tags: [],\n\t    notes: []\n\t    \n\t}\n\tthis.handleNoteEdit = this.handleNoteEdit.bind(this);\n\tthis.handleOpen = this.handleOpen.bind(this);\n\tthis.handleSave = this.handleSave.bind(this);\n    }\n\n    componentDidMount() {\n\tthis.loadNotes();\n    }\n\n    loadNotes() {\n\tfetch(NOTES_API + \"notes/brendon\").then(response => {\n\t    response.json().then(data => {\n\t\tlet notes = [];\n\t\tfor (const [key, value] of Object.entries(data.notes)) {\n\t\t    notes.push(value);\n\t\t}\n\t\tnotes.sort((a,b) => {\n\t\t    if (a.last_update_time <  b.last_update_time) {\n\t\t\treturn 1;\n\t\t    }\n\t\t    return -1;\n\t\t});\n\t\tthis.setState({\n\t\t    notes: notes\n\t\t});\n\t    })\n\t}).catch(console.log)\n    }\n\n    handleOpen = (active_note) => {\n\tthis.setState(\n\t    {\n\t\topen: true,\n\t\tactive_uuid: active_note.uuid,\n\t\ttitle: active_note.title,\n\t\tdescription: active_note.description,\n\t\torigin: active_note.origin || \"\",\n\t\ttags: active_note.tags,\n\t});\n    }\n\n    handleCreate = () => {\n\tthis.setState(\n\t    {\n\t\topen: true,\n\t\tactive_uuid: null,\n\t\ttitle: \"\",\n\t\tdescription: \"\",\n\t\torigin: \"\",\n\t\ttags: []\n\t});\n    }\n\n    handleNoteEdit(evt) {\n\tthis.setState({\n\t    [evt.target.name]: evt.target.value\n\t});\n    }\n\n    handleSave() {\n\t// If we are editing a note\n\tif(this.state.active_uuid) {\n\t    let note_update_request = {\n\t\tnote_id: this.state.active_uuid,\n\t\ttitle: this.state.title,\n\t\tdescription: this.state.description,\n\t\torigin: this.state.origin,\n\t\ttags: this.state.tags,\n\t    };\n\t    fetch(NOTES_API + \"note/\" + this.state.active_uuid, {\n\t\tmethod: \"PUT\",\n\t\theaders: {\n\t\t    'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(note_update_request)\n\t    }).then(response => {\n\t\t// Once we've successfully saved, log the response, and reload the notes on the page\n\t\tthis.loadNotes();\n\t    }).catch(console.error);\n\t    \n\t} else {\n\t    let note_create_request = {\n\t\ttitle: this.state.title,\n\t\tdescription: this.state.description,\n\t\towner:this.state.owner,\n\t\torigin: this.state.origin,\n\t\ttags: this.state.tags,\n\t    };\n\t    fetch(NOTES_API + \"notes\", {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t    'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(note_create_request)\n\t    }).then(response => {\n\t\tthis.loadNotes();\n\n\t\t// Force close after create\n\t\tthis.handleClose();\n\t    }).catch(console.error);\n\t}\n    }\n\n    handleClose = () => {\n\tthis.setState({open: false, active_note: null});\n    }\n\n    render() {\n\tconst { classes } = this.props;\n\treturn (\n\t    <Paper square className={classes.paper}>\n\t    {this.state.open &&\n\t     <NoteDialog\n\t\thandleClose={this.handleClose}\n\t\thandleChange={this.handleNoteEdit}\n\t\thandleSave={this.handleSave}\n\t\topen={this.state.open}\n\t\ttitle={this.state.title}\n\t\tdescription={this.state.description}\n\t\torigin={this.state.origin}\n\t\t/>}\n            <List className={classes.list}>\n            {this.state.notes.map((note_data, index) => (\n\t\t<>\n\t\t<NoteEntry key={`note-entry-${index}`} note_data={note_data} onClick={() => {this.handleOpen(note_data)}} />\n\t\t</>)\n\t    )}\n            </List>\n\t    <Fab color=\"secondary\" aria-label=\"add\" className={classes.addButton}>\n\t    <IconButton color=\"inherit\" onClick={this.handleCreate}>\n            <AddIcon />\n\t    </IconButton>\n            </Fab>\n\t    </Paper>\n\t);\n    }\n}\n\nclass ListsPanel extends React.Component {\n    render() {\n\tconst { classes } = this.props;\n\treturn (\n\t    <Paper square className={classes.paper}>\n            <Typography className={classes.text} variant=\"h5\" gutterBottom>\n\t    Lists\n            </Typography>\n            <List className={classes.list}>\n            {lists.map(ListEntry)}\n            </List>\n\t    </Paper>\n\t);\n    }\n}\n\n\nclass BottomAppBar extends React.Component {\n    state = {currentTab: \"notes\"}\n    changeTab = (event, value) => {\n\tthis.setState({ currentTab: value});\n    };\n\n    render () {\n\tconst {classes} = this.props;\n\treturn (\n\t    <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n\t    <Toolbar>\n\t    <Grid container alignItems=\"center\" justify=\"space-between\">\n\t    <Grid item>\n\t    <Tabs\n\t    value={this.state.currentTab}\n\t    onChange={this.changeTab}\n\t    variant=\"fullWidth\"\n\t    aria-label=\"tabs\"\n\t    >\n\t    <Tab classes={{ root: classes.fullHeight }} icon={<NotesIcon />} value=\"notes\" />\n\t    <Tab classes={{ root: classes.fullHeight }} icon={<ListIcon />} value=\"lists\" />\n\t    </Tabs>\n\t    </Grid>\n\t    <Grid item>\n\t    <IconButton color=\"inherit\">\n\t    <SearchIcon />\n\t    </IconButton>\n\t    </Grid>\n            </Grid>\n\t    </Toolbar>\n\t    </AppBar>\n\t);\n\n    }\n\n}\n\nclass NoteDialog extends React.Component {\n    render() {\n\tconst {\n\t    open,\n\t    handleChange,\n\t    handleClose,\n\t    handleSave,\n\t    title,\n\t    origin,\n\t    description,\n\t} = this.props;\n\treturn (<Dialog\n        open={open}\n        onClose={handleClose}\n        scroll=\"paper\"\n        aria-labelledby=\"Note Dialog\"\n        aria-describedby=\"Existing Note\"\n      >\n            <DialogTitle>\n\t    <TextField\n            margin=\"dense\"\n            name=\"title\"\n            label=\"Title\"\n            type=\"text\"\n            fullWidth\n\t    value={title}\n\t    onChange={handleChange}\n            />\n\t    </DialogTitle>\n            <DialogContent dividers={true}>\n\t    <TextField\n            margin=\"dense\"\n            name=\"description\"\n            type=\"text\"\n\t    multiline\n\t    rows={8}\n\t    value={description}\n\t    onChange={handleChange}\n            fullWidth\n            />\n\t    <TextField\n            margin=\"dense\"\n            name=\"origin\"\n            label=\"Origin\"\n            type=\"text\"\n            fullWidth\n\t    value={origin}\n\t    onChange={handleChange}\n            />\n\t    <TagField />\n\n        </DialogContent>\n            <DialogActions>\n          <Button onClick={handleSave} color=\"primary\">\n\t    Save\n          </Button>\n          <Button onClick={handleClose} color=\"primary\">\n\t    Close\n          </Button>\n        </DialogActions>\n\t</Dialog>);\n    }\n}\n\nclass TagField extends React.Component {\n    render() {\n\treturn(<TextField\n            margin=\"dense\"\n            name=\"tags\"\n            label=\"Tags\"\n            type=\"text\"\n            fullWidth\n\t/>)\n\t\n    }\n}\n\n    \n\nclass NoteEntry extends React.Component {\n    render() {\n\tconst {note_data, onClick} = this.props;\n\tconst last_update_human = new Date(Number(note_data.last_update_time) * 1000).toLocaleString();\n\treturn (<ListItem divider button onClick={onClick}>\n\t    <ListItemText primary={note_data.title} secondary={last_update_human} />\n\t    </ListItem>);\n    }\n}\n\nconst ListEntry = (list_data) =>\n    (<React.Fragment key={list_data.id}>\n\t<ListItem button>\n\t<ListItemText primary={list_data.title} secondary={list_data.description}/>\n\t</ListItem>\n\t</React.Fragment>);\n\nconst StyledBottomAppBar = withStyles(styles)(BottomAppBar);\nconst StyledNotesPanel = withStyles(styles)(NotesPanel);\nconst StyledListsPanel = withStyles(styles)(ListsPanel);\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}